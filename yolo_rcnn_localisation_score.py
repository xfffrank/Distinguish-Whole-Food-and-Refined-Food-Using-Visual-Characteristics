# -*- coding: utf-8 -*-
"""yolo-rcnn-localisation-score.ipynb

Automatically generated by Colaboratory.

"""

from matplotlib import pyplot as plt
import gluoncv
from gluoncv import model_zoo, data, utils

from gluoncv.data.transforms import image as timage
from gluoncv.data.transforms import bbox as tbbox
import mxnet as mx
import numpy as np

import pandas as pd
import numpy as np
import time
import os

# from google.colab import drive
# drive.mount('/content/drive')

# ! pip install gluoncv
# ! pip install mxnet

def transform_gt_bbox(img_path, model, bbox):
    if model == 'yolo':
        short, max_size= 416, 1024
    if model == 'rcnn':
        short, max_size = 600, 1000
    img = mx.image.imread(img_path)
    h, w, _ = img.shape
    resized_img = timage.resize_short_within(img, short, max_size)
    bbox = tbbox.resize(bbox, (w, h), (resized_img.shape[1], resized_img.shape[0]))
    return bbox


def compute_IoU(box_pred, box_gt):
    # comput the intersection area
    left = max(box_pred[0], box_gt[0])
    top = max(box_pred[1], box_gt[1])
    right = min(box_pred[2], box_gt[2])
    bottom = min(box_pred[3], box_gt[3])
    inter_area = max(0, right - left) * max(0, bottom - top)
    # comput the union area
    pred = (box_pred[2] - box_pred[0]) * (box_pred[3] - box_pred[1])
    gt = (box_gt[2] - box_gt[0]) * (box_gt[3] - box_gt[1])
    union = pred + gt - inter_area
    return inter_area / union


def find_bboxes(model, img_path, flag, thresh=0.5):
    assert flag in ['yolo', 'rcnn']
    if flag == 'rcnn':
        x, img = data.transforms.presets.rcnn.load_test(img_path)
    elif flag == 'yolo':
        x, img = data.transforms.presets.yolo.load_test(img_path)
    boxes = []
    labels, scores, bboxes = model(x)
    bboxes = bboxes.asnumpy()
    scores = scores.asnumpy()
    labels = labels.asnumpy()
    for i, bbox in enumerate(bboxes[0]):
        if scores is not None and scores.flat[i] < thresh:
            continue
        if labels is not None and labels.flat[i] < 0:
            continue
        xmin, ymin, xmax, ymax = [int(x) for x in bboxes[0][i]]
        boxes.append([xmin, ymin, xmax, ymax])
    return boxes

def compute_localisation_score(dataset_dir, bbox_info, model, flag):
    '''
    Compute the localisation score for yolo-v3/faster-rcnn.
    The localisation score refers to the mean IoU on the test set.

    :param flag: ['yolo', 'rcnn']

    '''
    iou_results = []
    count = 0
    start = time.time()

    for f in os.listdir(dataset_dir):
        img_path = os.path.join(dataset_dir, f)
        if (not os.path.isdir(img_path) and img_path.endswith('.jpg')):
            try:
                img_index = int(f[:-4])
                gt_box = np.array([bbox_info.loc[img_index]])
            except Exception as e:
                # ignore the case where there are multiple gt boxes
                print(e)
                continue
            else:
                gt_box = transform_gt_bbox(img_path, flag, gt_box)[0]
            bboxes = find_bboxes(model, img_path, flag)
            img_index = int(f[:-4])
            temp = []
            for box in bboxes:
                iou = compute_IoU(box, gt_box)
                temp.append(iou)
            iou = 0 if len(temp) == 0 else np.max(temp)
            iou_results.append(iou)
            count += 1
            if (count % 10 == 0):
                print('Count:', count)
                print('Average IoU: %.3f' % np.mean(iou_results))

    print('[Result] Average IoU: %.3f' % np.mean(iou_results))
    print('time elapsed: %.2f s' % (time.time() - start))



rcnn = model_zoo.get_model('faster_rcnn_resnet50_v1b_voc', pretrained=True)
# yolo = model_zoo.get_model('yolo3_darknet53_voc', pretrained=True)

dataset_dir = 'drive/My Drive/MSc dataset/localisation-test/mixed'
info = "drive/My Drive/MSc dataset/localisation-test/mixed/bb_info.txt"
bbox_info = pd.read_csv(info, sep=" ", index_col=0)

compute_localisation_score(dataset_dir, bbox_info, rcnn, 'rcnn')
# compute_localisation_score(dataset_dir, bbox_info, yolo, 'yolo')